{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Docker\"\n",
        "subtitle: Biostat 203B\n",
        "author: \"Dr. Hua Zhou @ UCLA\"\n",
        "date: today\n",
        "format:\n",
        "  html:\n",
        "    theme: cosmo\n",
        "    embed-resources: true\n",
        "    number-sections: true\n",
        "    toc: true\n",
        "    toc-depth: 4\n",
        "    toc-location: left\n",
        "    code-fold: false\n",
        "    link-external-icon: true\n",
        "    link-external-newwindow: true\n",
        "comments:\n",
        "  hypothesis: true\n",
        "---\n",
        "\n",
        "\n",
        "## What is Docker\n",
        "\n",
        "- It took us considerable efforts to set up our own laptop, or a cloud compute instance, or Hoffman2, or Windows WSL with a full stack of tools we need: Ubuntu, Linux libraries, R, R Studio, tidyverse, Shiny server, ...\n",
        "\n",
        "- We can save the configuration as an image (or snapshot) so we don't have to re-configure each time using a new computer, cloud service, or cluster.\n",
        "\n",
        "- In a more complex research or business environment, different apps may have different or conflicting dependencies, making configuration and deployment an excessive overhead. \n",
        "\n",
        "<p align=\"center\">\n",
        "![](./fullstack.png){width=400px}\n",
        "</p>\n",
        "\n",
        "\n",
        "- Alternative approach: each app, together with its computing environment and database, can be **containerized**.\n",
        "\n",
        "- **Paradigm**: develop apps locally (with potentially different toolchains), deploy (at scale) anywhere.\n",
        "\n",
        "<p align=\"center\">\n",
        "![](./container_diagram.png){width=300px}\n",
        "</p>\n",
        "\n",
        "## Why do _we_ (students, researchers) care?\n",
        "\n",
        "Scenario 1: You have a Windows machine, but want to learn the open source toolchains on Linux.\n",
        "\n",
        "Scenario 2: Your paper gets rejected, because the reviewer wants comparison with an existing method. But software for existing method only runs on Linux. \n",
        "\n",
        "Scenario 3: You made a fancy Shiny app. You want to deploy in AWS or GCP and scale that up to potentially many users.\n",
        "\n",
        "<p align=\"center\">\n",
        "![](./shinyio-quota-email.png){width=700px}\n",
        "</p>\n",
        "\n",
        "Scenario 4: You develop a software package and want to debug/test on different versions of R, on different OS (MacOS, Linux, Windows).\n",
        "\n",
        "Scenario 5: You develop a software package, which unfortunately only works on Linux. You want Mac and Windows users to be able to use your package as well.\n",
        "\n",
        "Scenario 6: Reproducible research. Hardware and software evolve fast. Simulation results in research papers are often hard to reproduce due to the changing computing environment. We can use Docker to containerize a simulation experiment (specific versions of OS and software), which can reproduce same results in any future moment.\n",
        "\n",
        "## Learning objectives\n",
        "\n",
        "- Be conversant with the container technology.\n",
        "\n",
        "- Understand the role containers play in the development and deployment process.\n",
        "\n",
        "- Master basic Docker usage.\n",
        "\n",
        "## Tutorial\n",
        "\n",
        "We will follow the tutorial [Get started with Docker](https://docs.docker.com/get-started/) to:\n",
        "\n",
        "- **containerize** a Python web app.\n",
        "\n",
        "- run the **container**.\n",
        "\n",
        "- run the container as a **service**.\n",
        "\n",
        "- run interrelated services as a **stack**.\n",
        "\n",
        "- deploy a stack to cloud.\n",
        "\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "# remove: all stopped containers, all networks not used by at least one container, all images without at least one container associated to them, all build cache\n",
        "docker system prune -a -f\n",
        "# kill all containers and then remove them\n",
        "docker container kill $(docker container ls -a -q)\n",
        "docker container rm $(docker container ls -a -q)\n",
        "# remoeve all Docker iamges\n",
        "docker image rm $(docker image ls -a -q)\n",
        "```\n",
        "\n",
        "\n",
        "### Installation\n",
        "\n",
        "[Download](https://www.docker.com/products/docker-desktop) and install the Docker Desktop on your computer.\n",
        "\n",
        "### Docker survival commands\n",
        "\n",
        "Part 1:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "## List Docker CLI commands\n",
        "docker\n",
        "docker container --help\n",
        "\n",
        "## Display Docker version and info\n",
        "docker --version\n",
        "docker version\n",
        "docker info\n",
        "\n",
        "## Excecute Docker image\n",
        "docker run hello-world\n",
        "\n",
        "## List Docker images\n",
        "docker image ls\n",
        "\n",
        "## List Docker containers (running, all, all in quiet mode)\n",
        "docker container ls\n",
        "docker container ls --all\n",
        "docker container ls -a -q\n",
        "```\n",
        "\n",
        "\n",
        "Part 2:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker build -t friendlyhello .  # Create image using this directory's Dockerfile\n",
        "docker run -p 4000:80 friendlyhello  # Run \"friendlyname\" mapping port 4000 to 80\n",
        "docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode\n",
        "docker container ls                                # List all running containers\n",
        "docker container ls -a             # List all containers, even those not running\n",
        "docker container stop <hash>           # Gracefully stop the specified container\n",
        "docker container kill <hash>         # Force shutdown of the specified container\n",
        "docker container rm <hash>        # Remove specified container from this machine\n",
        "docker container rm $(docker container ls -a -q)         # Remove all containers\n",
        "docker image ls -a                             # List all images on this machine\n",
        "docker image rm <image id>            # Remove specified image from this machine\n",
        "docker image rm $(docker image ls -a -q)   # Remove all images from this machine\n",
        "docker login             # Log in this CLI session using your Docker credentials\n",
        "docker tag <image> username/repository:tag  # Tag <image> for upload to registry\n",
        "docker push username/repository:tag            # Upload tagged image to registry\n",
        "docker run username/repository:tag                   # Run image from a registry\n",
        "```\n",
        "\n",
        "\n",
        "Part 3:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker stack ls                                            # List stacks or apps\n",
        "docker stack deploy -c <composefile> <appname>  # Run the specified Compose file\n",
        "docker service ls                 # List running services associated with an app\n",
        "docker service ps <service>                  # List tasks associated with an app\n",
        "docker inspect <task or container>                   # Inspect task or container\n",
        "docker container ls -q                                      # List container IDs\n",
        "docker stack rm <appname>                             # Tear down an application\n",
        "docker swarm leave --force      # Take down a single node swarm from the manager\n",
        "```\n",
        "\n",
        "\n",
        "### Containerize a web app\n",
        "\n",
        "We use Docker to develop an app that serves a webpage <server.ucla-biostat-203b.com> on the teaching server, which is a GCP instance.\n",
        "\n",
        "#### Essential components\n",
        "\n",
        "- [`requirements.txt`](https://raw.githubusercontent.com/Hua-Zhou/Hua-Zhou.github.io/master/teaching/biostatm280-2019winter/slides/14-docker/requirements.txt) lists the Python dependencies:\n",
        "\n",
        "```{bash, eval=TRUE}\n",
        "cat requirements.txt\n",
        "```\n",
        "\n",
        "Flask is Python tool for web development. Redis is a in-memory database system.\n",
        "\n",
        "- [`app.py`](https://raw.githubusercontent.com/Hua-Zhou/Hua-Zhou.github.io/master/teaching/biostatm280-2019winter/slides/14-docker/app.py) is the Python code for serving a webpage.\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "cat app.py\n",
        "```\n",
        "\n",
        "\n",
        "- [`Dockerfile`](https://raw.githubusercontent.com/Hua-Zhou/Hua-Zhou.github.io/master/teaching/biostatm280-2019winter/slides/14-docker/Dockerfile) instructs Docker how to put things together in a container:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "cat Dockerfile\n",
        "```\n",
        "\n",
        "See [python on Docker Hub](https://hub.docker.com/_/python/) for details on the `python:2.7-slim` image.\n",
        "\n",
        "See [Dockerfile reference](https://docs.docker.com/engine/reference/builder/) for commands in Dockerfile.\n",
        "\n",
        "#### Build the app\n",
        "\n",
        "Build the image:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker build -t friendlyhello .\n",
        "```\n",
        "\n",
        "Display the image:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker image ls\n",
        "```\n",
        "\n",
        "\n",
        "#### Run the app\n",
        "\n",
        "Run the app by\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker run -p 4000:80 friendlyhello\n",
        "```\n",
        "\n",
        "or in detached mode\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker run -d -p 4000:80 friendlyhello\n",
        "```\n",
        "\n",
        "`-p 4000:80` maps port 80 of the container to port 4000 of host.\n",
        "\n",
        "Display the container:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker container ls\n",
        "```\n",
        "\n",
        "\n",
        "We now should be able to check the webpage by pointing browser to `localhost:4000`.\n",
        "\n",
        "To stop the container, issue:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker container stop <CONTAINER_ID>\n",
        "```\n",
        "\n",
        "To kill all containers\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker container kill $(docker container ls -a -q)\n",
        "```\n",
        "\n",
        "then remove them\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker container rm $(docker container ls -a -q)\n",
        "```\n",
        "\n",
        "\n",
        "#### Share the image\n",
        "\n",
        "Tag the `friendlyhello` image:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker tag friendlyhello huazhou/get-started:part2\n",
        "```\n",
        "\n",
        "Upload the tagged image to registry:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker push huazhou/get-started:part2\n",
        "```\n",
        "\n",
        "Now the image is up on [Docker Hub registry](https://hub.docker.com/r/huazhou/get-started/). We can run image (on any machine with Docker installed) from the registry:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker run -d -p 4000:80 huazhou/get-started:part2\n",
        "```\n",
        "\n",
        "\n",
        "### Run replicates of a container as service\n",
        "\n",
        "**Services** are really just \"containers in production.\" A service only runs one image, but it codifies the way that image runs—what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. \n",
        "\n",
        "Following [`docker-compose.yml`](https://raw.githubusercontent.com/Hua-Zhou/Hua-Zhou.github.io/master/teaching/biostatm280-2019winter/slides/14-docker/docker-compose.yml) specifies:\n",
        "\n",
        "- Pull the image `huazhou/get-started:part2`.\n",
        "\n",
        "- Run 5 instances of that image as a service called `web`, limiting each one to use, at most, 10% of the CPU (across all cores), and 50MB of RAM.\n",
        "\n",
        "- Immediately restart containers if one fails.\n",
        "\n",
        "- Map port 80 on the host to `web`’s port 80.\n",
        "\n",
        "- Instruct `web`’s containers to share port 80 via a load-balanced network called webnet. (Internally, the containers themselves publish to `web`’s port 80 at an ephemeral port.)\n",
        "\n",
        "- Define the `webnet` network with the default settings (which is a load-balanced overlay network).\n",
        "\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "cat docker-compose.yml\n",
        "```\n",
        "\n",
        "\n",
        "See [Docker Compose reference](https://docs.docker.com/compose/compose-file/) for commands in Docker Compose.\n",
        "\n",
        "Run a new load-balanced app:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker swarm init\n",
        "docker stack deploy -c docker-compose.yml getstartedlab\n",
        "```\n",
        "\n",
        "\n",
        "List the service:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker service ls\n",
        "```\n",
        "\n",
        "List the tasks for your service:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker service ps getstartedlab_web\n",
        "```\n",
        "\n",
        "\n",
        "To take down the service and swarm:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker stack rm getstartedlab\n",
        "docker swarm leave --force\n",
        "```\n",
        "\n",
        "\n",
        "### Run interrelated services as a stack\n",
        "\n",
        "A **stack** is a group of interrelated services that share dependencies, and can be orchestrated and scaled together. A single stack is capable of defining and coordinating the functionality of an entire application.\n",
        "\n",
        "Here we want to add two more services: a `visualizer` for visualizing services and a `redis` database for counting webpage visits. \n",
        "\n",
        "The only thing we need to do is to update the `docker-composer.yml` file. Let's name the new file [`docker-compose-stack.yml`](https://raw.githubusercontent.com/Hua-Zhou/Hua-Zhou.github.io/master/teaching/biostatm280-2019winter/slides/14-docker/docker-compose-stack.yml) to avoid confusion:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "cat docker-compose-stack.yml\n",
        "```\n",
        "\n",
        "Then deploy\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker swarm init\n",
        "docker stack deploy -c docker-compose-stack.yml getstartedlab\n",
        "```\n",
        "\n",
        "\n",
        "List the service:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker service ls\n",
        "```\n",
        "\n",
        "List the tasks for your service:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker service ps getstartedlab_web\n",
        "```\n",
        "\n",
        "\n",
        "Now we can check the new webpage at `localhost:80` and the visualizer at `localhost:8080` in browser.\n",
        "\n",
        "To take down the service and swarm:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker stack rm getstartedlab\n",
        "docker swarm leave --force\n",
        "```\n",
        "\n",
        "\n",
        "### Deploy a stack to GCP\n",
        "\n",
        "Option 1: Create a container-optimized instance in GCP Compute Engine.\n",
        "\n",
        "Option 2: On any GCP instance, install Docker and run a container. \n",
        "\n",
        "- On CentOS, [install Docker CE](https://docs.docker.com/install/linux/docker-ce/centos/) by:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "# install yum-config-manager\n",
        "sudo yum install -y yum-utils \n",
        "sudo yum install -y yum-config-manager device-mapper-persistent-data lvm2\n",
        "# add Docker CE repo for CentOS\n",
        "sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n",
        "## install Docker CE\n",
        "sudo yum install docker-ce\n",
        "```\n",
        "\n",
        "\n",
        "- Run container:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "sudo docker run -d -p 80:80 huazhou/get-started:part2\n",
        "```\n",
        "\n",
        "\n",
        "- To run the web service, copy `docker-compose.yml` to the server and run\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "sudo docker swarm init\n",
        "sudo docker stack deploy -c docker-compose.yml getstartedlab\n",
        "```\n",
        "\n",
        "\n",
        "- To run the stack with web+visualizer+redis, copy `docker-compose-stack.yml` to the server and run\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "sudo docker swarm init\n",
        "sudo docker stack deploy -c docker-compose-stack.yml getstartedlab\n",
        "``` \n",
        "\n",
        "\n",
        "- To take down the service and swarm:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "sudo docker stack rm getstartedlab\n",
        "sudo docker swarm leave --force\n",
        "```\n",
        "\n",
        "\n",
        "### Multi-container, multi-machine applications\n",
        "\n",
        "See [part 4](https://docs.docker.com/get-started/part4/) of the tutorial.\n",
        "\n",
        "### Stack: heterogenous containers, multi-machine applications\n",
        "\n",
        "See [part 5](https://docs.docker.com/get-started/part5/) of the tutorial.\n",
        "\n",
        "### Deploy stack to AWS/Azure\n",
        "\n",
        "See [part 6](https://docs.docker.com/get-started/part6/) of the tutorial.\n",
        "\n",
        "## Scenario: Run a Linux container interactively\n",
        "\n",
        "Run [CentOS](https://hub.docker.com/_/centos/) interactively (as `root`):\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker run -ti --rm centos:latest\n",
        "```\n",
        "\n",
        "`-i` means interactive. `-t` allocates a pseudo-tty. `--rm` removes the container when it exits.\n",
        "\n",
        "Run [Ubuntu](https://hub.docker.com/_/ubuntu/) interactively (as `root`):\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker run -ti --rm ubuntu:latest\n",
        "```\n",
        "\n",
        "\n",
        "## Scenario: Run Linux+R on your MacOS/Windows laptop\n",
        "\n",
        "- Launch R interactively:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker run -ti --rm -v ~/Desktop:/Desktop r-base\n",
        "```\n",
        "\n",
        "It downloads, builds, and runs a Docker image called [`r-base`](https://hub.docker.com/r/_/r-base/) (Debian + R). `-v` maps a folder on host to a folder in the container.\n",
        "\n",
        "- Run a bash session on the container:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker run -ti --rm r-base /usr/bin/bash\n",
        "```\n",
        "\n",
        "\n",
        "- Run R in batch mode. Suppose current folder contains an R script `autoSim.R`, which we want to run:\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "docker run -ti --rm -v \"$PWD\":/home/docker -w /home/docker -u docker r-base Rscript autoSim.R\n",
        "```\n",
        "\n",
        "`-w` specifies the working directory. `-u` specifies the user.\n",
        "\n",
        "## Scenario: Deploy a Shiny app to cloud\n",
        "\n",
        "Suppose we have a Shiny app `census-app` with contents: `app.R`, `data/counties.rds`, and `helpers.R`. It has dependencies `maps` and `mapproj` R packages. We want to deploy the Shiny app to a GCP instance. We can use following Dockerfile to compile an image\n",
        "\n",
        "```{bash}\n",
        "#| eval: false\n",
        "cat ../19-shiny/census-app/Dockerfile\n",
        "```\n",
        "\n",
        "and then deploy to cloud.\n",
        "\n",
        "## Scenario: Ubuntu + R + RStudio Server + tidyverse toolchain\n",
        "\n",
        "To build an image with Ubuntu + R + RStudio Server + tidyverse toolchain, we can use a Dockerfile."
      ],
      "id": "c28ec427"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}